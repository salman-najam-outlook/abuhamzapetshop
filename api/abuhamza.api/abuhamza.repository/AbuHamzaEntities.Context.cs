//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace abuhamza.repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class abuhamzapetstoreEntities : DbContext
    {
        public abuhamzapetstoreEntities()
            : base("name=abuhamzapetstoreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblAccount> tblAccounts { get; set; }
        public virtual DbSet<tblAccType> tblAccTypes { get; set; }
        public virtual DbSet<tblAdvance> tblAdvances { get; set; }
        public virtual DbSet<tblCategory> tblCategories { get; set; }
        public virtual DbSet<tblCustomer> tblCustomers { get; set; }
        public virtual DbSet<tblDetailOrder> tblDetailOrders { get; set; }
        public virtual DbSet<tblDetailTransaction> tblDetailTransactions { get; set; }
        public virtual DbSet<tblEmployee> tblEmployees { get; set; }
        public virtual DbSet<tblForthSubCategory> tblForthSubCategories { get; set; }
        public virtual DbSet<tblInvoice> tblInvoices { get; set; }
        public virtual DbSet<tblMainCategory> tblMainCategories { get; set; }
        public virtual DbSet<tblProduct> tblProducts { get; set; }
        public virtual DbSet<tblPurchaseOrder> tblPurchaseOrders { get; set; }
        public virtual DbSet<tblSalary> tblSalaries { get; set; }
        public virtual DbSet<tblSubCategory> tblSubCategories { get; set; }
        public virtual DbSet<tblSupplier> tblSuppliers { get; set; }
        public virtual DbSet<tblTransaction> tblTransactions { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblUserType> tblUserTypes { get; set; }
        public virtual DbSet<tblvch> tblvches { get; set; }
        public virtual DbSet<tblVchDetail> tblVchDetails { get; set; }
        public virtual DbSet<tblDetailInvoice> tblDetailInvoices { get; set; }
    
        public virtual int stpDetailOrder(Nullable<int> orderId, Nullable<int> quatity, string barcode, Nullable<decimal> purchasePrice, string voucherNo)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            var quatityParameter = quatity.HasValue ?
                new ObjectParameter("quatity", quatity) :
                new ObjectParameter("quatity", typeof(int));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("purchasePrice", purchasePrice) :
                new ObjectParameter("purchasePrice", typeof(decimal));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpDetailOrder", orderIdParameter, quatityParameter, barcodeParameter, purchasePriceParameter, voucherNoParameter);
        }
    
        public virtual int stpPurchaseOrder(Nullable<int> orderId, Nullable<decimal> totalAmount, Nullable<decimal> paidAmount, string orderDesc, Nullable<int> sup_id, Nullable<decimal> voucherAmount, string voucherNo, Nullable<int> user_id, Nullable<int> creditorAcc_id)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var orderDescParameter = orderDesc != null ?
                new ObjectParameter("orderDesc", orderDesc) :
                new ObjectParameter("orderDesc", typeof(string));
    
            var sup_idParameter = sup_id.HasValue ?
                new ObjectParameter("sup_id", sup_id) :
                new ObjectParameter("sup_id", typeof(int));
    
            var voucherAmountParameter = voucherAmount.HasValue ?
                new ObjectParameter("voucherAmount", voucherAmount) :
                new ObjectParameter("voucherAmount", typeof(decimal));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var creditorAcc_idParameter = creditorAcc_id.HasValue ?
                new ObjectParameter("creditorAcc_id", creditorAcc_id) :
                new ObjectParameter("creditorAcc_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpPurchaseOrder", orderIdParameter, totalAmountParameter, paidAmountParameter, orderDescParameter, sup_idParameter, voucherAmountParameter, voucherNoParameter, user_idParameter, creditorAcc_idParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<stpGetPendingVouchersBySupplierID_Result> stpGetPendingVouchersBySupplierID(Nullable<int> sup_Id)
        {
            var sup_IdParameter = sup_Id.HasValue ?
                new ObjectParameter("sup_Id", sup_Id) :
                new ObjectParameter("sup_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpGetPendingVouchersBySupplierID_Result>("stpGetPendingVouchersBySupplierID", sup_IdParameter);
        }
    
        public virtual int stpSaleDetail(Nullable<int> invoiceId, Nullable<int> quatity, string barcode, Nullable<decimal> sellPrice, string voucherNo, Nullable<decimal> purchasePrice)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("invoiceId", invoiceId) :
                new ObjectParameter("invoiceId", typeof(int));
    
            var quatityParameter = quatity.HasValue ?
                new ObjectParameter("quatity", quatity) :
                new ObjectParameter("quatity", typeof(int));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var sellPriceParameter = sellPrice.HasValue ?
                new ObjectParameter("sellPrice", sellPrice) :
                new ObjectParameter("sellPrice", typeof(decimal));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("purchasePrice", purchasePrice) :
                new ObjectParameter("purchasePrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpSaleDetail", invoiceIdParameter, quatityParameter, barcodeParameter, sellPriceParameter, voucherNoParameter, purchasePriceParameter);
        }
    
        public virtual int stpSaleOrder(Nullable<int> orderId, Nullable<int> totalQty, Nullable<decimal> subTotal, Nullable<decimal> totalAmount, Nullable<decimal> discount, Nullable<decimal> tenderedAmount, Nullable<decimal> change, string customerName, Nullable<int> user_id, Nullable<decimal> voucherAmount, string voucherNo, string customerNo)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            var totalQtyParameter = totalQty.HasValue ?
                new ObjectParameter("totalQty", totalQty) :
                new ObjectParameter("totalQty", typeof(int));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("subTotal", subTotal) :
                new ObjectParameter("subTotal", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("totalAmount", totalAmount) :
                new ObjectParameter("totalAmount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("discount", discount) :
                new ObjectParameter("discount", typeof(decimal));
    
            var tenderedAmountParameter = tenderedAmount.HasValue ?
                new ObjectParameter("tenderedAmount", tenderedAmount) :
                new ObjectParameter("tenderedAmount", typeof(decimal));
    
            var changeParameter = change.HasValue ?
                new ObjectParameter("change", change) :
                new ObjectParameter("change", typeof(decimal));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("customerName", customerName) :
                new ObjectParameter("customerName", typeof(string));
    
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var voucherAmountParameter = voucherAmount.HasValue ?
                new ObjectParameter("voucherAmount", voucherAmount) :
                new ObjectParameter("voucherAmount", typeof(decimal));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("customerNo", customerNo) :
                new ObjectParameter("customerNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpSaleOrder", orderIdParameter, totalQtyParameter, subTotalParameter, totalAmountParameter, discountParameter, tenderedAmountParameter, changeParameter, customerNameParameter, user_idParameter, voucherAmountParameter, voucherNoParameter, customerNoParameter);
        }
    
        public virtual int stpPurchaseOrderPayment(Nullable<int> sup_id, Nullable<decimal> voucherAmount, Nullable<decimal> remainingAmount, string voucherNo)
        {
            var sup_idParameter = sup_id.HasValue ?
                new ObjectParameter("sup_id", sup_id) :
                new ObjectParameter("sup_id", typeof(int));
    
            var voucherAmountParameter = voucherAmount.HasValue ?
                new ObjectParameter("voucherAmount", voucherAmount) :
                new ObjectParameter("voucherAmount", typeof(decimal));
    
            var remainingAmountParameter = remainingAmount.HasValue ?
                new ObjectParameter("remainingAmount", remainingAmount) :
                new ObjectParameter("remainingAmount", typeof(decimal));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpPurchaseOrderPayment", sup_idParameter, voucherAmountParameter, remainingAmountParameter, voucherNoParameter);
        }
    
        public virtual int stpCashTransaction(Nullable<int> debitor_Acc_id, Nullable<int> creditor_Acc_id, Nullable<decimal> voucherAmount, string voucherNo, string desc)
        {
            var debitor_Acc_idParameter = debitor_Acc_id.HasValue ?
                new ObjectParameter("debitor_Acc_id", debitor_Acc_id) :
                new ObjectParameter("debitor_Acc_id", typeof(int));
    
            var creditor_Acc_idParameter = creditor_Acc_id.HasValue ?
                new ObjectParameter("creditor_Acc_id", creditor_Acc_id) :
                new ObjectParameter("creditor_Acc_id", typeof(int));
    
            var voucherAmountParameter = voucherAmount.HasValue ?
                new ObjectParameter("voucherAmount", voucherAmount) :
                new ObjectParameter("voucherAmount", typeof(decimal));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpCashTransaction", debitor_Acc_idParameter, creditor_Acc_idParameter, voucherAmountParameter, voucherNoParameter, descParameter);
        }
    
        public virtual ObjectResult<stpGetAllPendingVouchers_Result> stpGetAllPendingVouchers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpGetAllPendingVouchers_Result>("stpGetAllPendingVouchers");
        }
    
        public virtual ObjectResult<Nullable<int>> CheckChildCategory(Nullable<int> mainCat_id, Nullable<int> cat_id, Nullable<int> subCat_id)
        {
            var mainCat_idParameter = mainCat_id.HasValue ?
                new ObjectParameter("mainCat_id", mainCat_id) :
                new ObjectParameter("mainCat_id", typeof(int));
    
            var cat_idParameter = cat_id.HasValue ?
                new ObjectParameter("cat_id", cat_id) :
                new ObjectParameter("cat_id", typeof(int));
    
            var subCat_idParameter = subCat_id.HasValue ?
                new ObjectParameter("subCat_id", subCat_id) :
                new ObjectParameter("subCat_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckChildCategory", mainCat_idParameter, cat_idParameter, subCat_idParameter);
        }
    
        public virtual int sp_alterdiagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition1_Result> sp_helpdiagramdefinition1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition1_Result>("sp_helpdiagramdefinition1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams1_Result> sp_helpdiagrams1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams1_Result>("sp_helpdiagrams1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram1(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram1", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams1");
        }
    
        public virtual ObjectResult<stpGetAllInvoices_Result> stpGetAllInvoices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpGetAllInvoices_Result>("stpGetAllInvoices");
        }
    
        public virtual ObjectResult<stpGetFromAccounts_Result> stpGetFromAccounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpGetFromAccounts_Result>("stpGetFromAccounts");
        }
    
        public virtual int stpGetToAccounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpGetToAccounts");
        }
    
        public virtual ObjectResult<stpGetPendingVouchersByVoucherType_Result> stpGetPendingVouchersByVoucherType(string vchType)
        {
            var vchTypeParameter = vchType != null ?
                new ObjectParameter("vchType", vchType) :
                new ObjectParameter("vchType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpGetPendingVouchersByVoucherType_Result>("stpGetPendingVouchersByVoucherType", vchTypeParameter);
        }
    
        public virtual int stpAdvance(Nullable<decimal> amount, string barcode, string desc, string cus_No, string voucherNo, Nullable<System.DateTime> date, string cus_Name)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var cus_NoParameter = cus_No != null ?
                new ObjectParameter("cus_No", cus_No) :
                new ObjectParameter("cus_No", typeof(string));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var cus_NameParameter = cus_Name != null ?
                new ObjectParameter("cus_Name", cus_Name) :
                new ObjectParameter("cus_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpAdvance", amountParameter, barcodeParameter, descParameter, cus_NoParameter, voucherNoParameter, dateParameter, cus_NameParameter);
        }
    
        public virtual ObjectResult<stpGetAdvances_Result> stpGetAdvances(string vchType)
        {
            var vchTypeParameter = vchType != null ?
                new ObjectParameter("vchType", vchType) :
                new ObjectParameter("vchType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpGetAdvances_Result>("stpGetAdvances", vchTypeParameter);
        }
    
        public virtual ObjectResult<stpGetPendingAdvanceVouchers_Result> stpGetPendingAdvanceVouchers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpGetPendingAdvanceVouchers_Result>("stpGetPendingAdvanceVouchers");
        }
    
        public virtual int stpOpenAccountWithMapping(Nullable<int> user_id, Nullable<int> usertype, Nullable<int> acctype, string name)
        {
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var usertypeParameter = usertype.HasValue ?
                new ObjectParameter("usertype", usertype) :
                new ObjectParameter("usertype", typeof(int));
    
            var acctypeParameter = acctype.HasValue ?
                new ObjectParameter("acctype", acctype) :
                new ObjectParameter("acctype", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpOpenAccountWithMapping", user_idParameter, usertypeParameter, acctypeParameter, nameParameter);
        }
    
        public virtual int stpUpdateAdvance(string voucherNo, Nullable<decimal> amount, string transactionType)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("transactionType", transactionType) :
                new ObjectParameter("transactionType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpUpdateAdvance", voucherNoParameter, amountParameter, transactionTypeParameter);
        }
    
        public virtual int stpUseAdvance(string advanceVoucherNo, string saleVoucherNo, Nullable<decimal> totalAdvance, Nullable<decimal> remainingAdvance)
        {
            var advanceVoucherNoParameter = advanceVoucherNo != null ?
                new ObjectParameter("advanceVoucherNo", advanceVoucherNo) :
                new ObjectParameter("advanceVoucherNo", typeof(string));
    
            var saleVoucherNoParameter = saleVoucherNo != null ?
                new ObjectParameter("saleVoucherNo", saleVoucherNo) :
                new ObjectParameter("saleVoucherNo", typeof(string));
    
            var totalAdvanceParameter = totalAdvance.HasValue ?
                new ObjectParameter("totalAdvance", totalAdvance) :
                new ObjectParameter("totalAdvance", typeof(decimal));
    
            var remainingAdvanceParameter = remainingAdvance.HasValue ?
                new ObjectParameter("remainingAdvance", remainingAdvance) :
                new ObjectParameter("remainingAdvance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpUseAdvance", advanceVoucherNoParameter, saleVoucherNoParameter, totalAdvanceParameter, remainingAdvanceParameter);
        }
    
        public virtual ObjectResult<stpGetCustomerByAccountTypeID> stpGetCustomerByAccountTypeID(Nullable<int> acc_TypeId)
        {
            var acc_TypeIdParameter = acc_TypeId.HasValue ?
                new ObjectParameter("acc_TypeId", acc_TypeId) :
                new ObjectParameter("acc_TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpGetCustomerByAccountTypeID>("stpGetCustomerByAccountTypeID", acc_TypeIdParameter);
        }
    
        public virtual ObjectResult<stpGetCustomerByAccountTypeID1_Result> stpGetCustomerByAccountTypeID1(Nullable<int> acc_TypeId)
        {
            var acc_TypeIdParameter = acc_TypeId.HasValue ?
                new ObjectParameter("acc_TypeId", acc_TypeId) :
                new ObjectParameter("acc_TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpGetCustomerByAccountTypeID1_Result>("stpGetCustomerByAccountTypeID1", acc_TypeIdParameter);
        }
    
        public virtual int stpOpenAccountWithMapping1(Nullable<int> user_id, Nullable<int> usertype, Nullable<int> acctype, string name)
        {
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var usertypeParameter = usertype.HasValue ?
                new ObjectParameter("usertype", usertype) :
                new ObjectParameter("usertype", typeof(int));
    
            var acctypeParameter = acctype.HasValue ?
                new ObjectParameter("acctype", acctype) :
                new ObjectParameter("acctype", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpOpenAccountWithMapping1", user_idParameter, usertypeParameter, acctypeParameter, nameParameter);
        }
    
        public virtual int stpUpdateAdvance1(string voucherNo, Nullable<decimal> amount, string transactionType)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("transactionType", transactionType) :
                new ObjectParameter("transactionType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpUpdateAdvance1", voucherNoParameter, amountParameter, transactionTypeParameter);
        }
    
        public virtual int stpUseAdvance1(string advanceVoucherNo, string saleVoucherNo, Nullable<decimal> totalAdvance, Nullable<decimal> remainingAdvance)
        {
            var advanceVoucherNoParameter = advanceVoucherNo != null ?
                new ObjectParameter("advanceVoucherNo", advanceVoucherNo) :
                new ObjectParameter("advanceVoucherNo", typeof(string));
    
            var saleVoucherNoParameter = saleVoucherNo != null ?
                new ObjectParameter("saleVoucherNo", saleVoucherNo) :
                new ObjectParameter("saleVoucherNo", typeof(string));
    
            var totalAdvanceParameter = totalAdvance.HasValue ?
                new ObjectParameter("totalAdvance", totalAdvance) :
                new ObjectParameter("totalAdvance", typeof(decimal));
    
            var remainingAdvanceParameter = remainingAdvance.HasValue ?
                new ObjectParameter("remainingAdvance", remainingAdvance) :
                new ObjectParameter("remainingAdvance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpUseAdvance1", advanceVoucherNoParameter, saleVoucherNoParameter, totalAdvanceParameter, remainingAdvanceParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> stpGetAccountBalance(Nullable<int> acc_id)
        {
            var acc_idParameter = acc_id.HasValue ?
                new ObjectParameter("acc_id", acc_id) :
                new ObjectParameter("acc_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("stpGetAccountBalance", acc_idParameter);
        }
    
        public virtual ObjectResult<stpGetDashboardData_Result> stpGetDashboardData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpGetDashboardData_Result>("stpGetDashboardData");
        }
    }
}
